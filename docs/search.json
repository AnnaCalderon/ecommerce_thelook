[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ecommerce Project",
    "section": "",
    "text": "# PDF PLACE"
  },
  {
    "objectID": "process.html",
    "href": "process.html",
    "title": "Data Processing",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "data_exploration.html",
    "href": "data_exploration.html",
    "title": "Data Exploration",
    "section": "",
    "text": "Products and Distribution Centers\n\ndistribution_centers &lt;- read.csv(\"data/distribution_centers_thelook.csv\")\ndistribution_centers %&gt;% head(10)\n\n   id                                        name latitude longitude\n1   2                                  Chicago IL  41.8369  -87.6847\n2   1                                  Memphis TN  35.1174  -89.9711\n3   6 Port Authority of New York/New Jersey NY/NJ  40.6340  -73.7834\n4   4                              Los Angeles CA  34.0500 -118.2500\n5  10                                 Savannah GA  32.0167  -81.1167\n6   3                                  Houston TX  29.7604  -95.3698\n7   7                             Philadelphia PA  39.9500  -75.1667\n8   9                               Charleston SC  32.7833  -79.9333\n9   5                              New Orleans LA  29.9500  -90.0667\n10  8                                   Mobile AL  30.6944  -88.0431\n   distribution_center_geom\n1   POINT(-87.6847 41.8369)\n2   POINT(-89.9711 35.1174)\n3    POINT(-73.7834 40.634)\n4      POINT(-118.25 34.05)\n5   POINT(-81.1167 32.0167)\n6   POINT(-95.3698 29.7604)\n7     POINT(-75.1667 39.95)\n8   POINT(-79.9333 32.7833)\n9     POINT(-90.0667 29.95)\n10  POINT(-88.0431 30.6944)\n\nproducts &lt;- read.csv(\"data/products.csv\") %&gt;% \n      mutate(center = case_when(\n    distribution_center_id==1 ~ \"Memphis\",\n    distribution_center_id==2 ~ \"Chicago\",\n    distribution_center_id==3 ~ \"Houston\", \n    distribution_center_id==4 ~ \"Los Angeles\",\n    distribution_center_id==5 ~ \"New Orleans\", \n    distribution_center_id==6 ~ \"Port Authority NY/NJ\",\n    distribution_center_id==7 ~ \"Philadelphia\",\n    distribution_center_id==8 ~ \"Mobile\", \n    distribution_center_id==9 ~ \"Charleston\",\n    distribution_center_id==10 ~ \"Savannah\"\n  ))\n\nproducts %&gt;% head(10)\n\n      id    cost    category\n1  13842 2.51875 Accessories\n2  13928 2.33835 Accessories\n3  14115 4.87956 Accessories\n4  14157 4.64877 Accessories\n5  14273 6.50793 Accessories\n6  15674 3.10625        Plus\n7  15816 3.17730        Plus\n8  28646 8.73563 Accessories\n9  28670 2.67594 Accessories\n10 28714 2.27500 Accessories\n                                                             name brand\n1                Low Profile Dyed Cotton Twill Cap - Navy W39S55D    MG\n2               Low Profile Dyed Cotton Twill Cap - Putty W39S55D    MG\n3                    Enzyme Regular Solid Army Caps-Black W35S45D    MG\n4         Enzyme Regular Solid Army Caps-Olive W35S45D (One Size)    MG\n5                           Washed Canvas Ivy Cap - Black W11S64C    MG\n6                Low Profile Dyed Cotton Twill Cap - Navy W39S55D    MG\n7               Low Profile Dyed Cotton Twill Cap - Putty W39S55D    MG\n8  4 Panel Large Bill Flap Hat W15S48B (One Size Fits Most/Khaki)    MG\n9               Low Profile Dyed Cotton Twill Cap - Black W39S55D    MG\n10              Low Profile Dyed Cotton Twill Cap - Khaki W39S55D    MG\n   retail_price department                              sku\n1          6.25      Women EBD58B8A3F1D72F4206201DA62FB1204\n2          5.95      Women 2EAC42424D12436BDD6A5B8A88480CC3\n3         10.99      Women EE364229B2791D1EF9355708EFF0BA34\n4         10.99      Women 00BD13095D06C20B11A2993CA419D16B\n5         15.99      Women F531DC20FDE20B7ADF3A73F52B71D0AF\n6          6.25      Women 63894CE404B8C652915C41EF8B879D20\n7          5.95      Women 151EA8C2D98CE89C2336324C11B1E107\n8         19.99        Men 789334DE6DAA80D83AB4ACB6A4BF5AC7\n9          6.18        Men E74843B99DA8B29775C6AA9080436844\n10         6.25        Men 8CA33D44648CC9FEECEF21E5A7123291\n   distribution_center_id  center\n1                       1 Memphis\n2                       1 Memphis\n3                       1 Memphis\n4                       1 Memphis\n5                       1 Memphis\n6                       1 Memphis\n7                       1 Memphis\n8                       1 Memphis\n9                       1 Memphis\n10                      1 Memphis\n\n\n\n# Aggregate data\ndata_summary &lt;- products %&gt;%\n  group_by(center, category) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n\n# Pivot the table wider\nwide_data &lt;- data_summary %&gt;%\n  pivot_wider(\n    names_from = center,        # Columns are created from the \"center\" variable\n    values_from = count,        # Values are taken from the \"count\" variable\n    values_fill = 0             # Fill missing values with 0\n  )\n\n# Create a pretty table \npretty_wide_table &lt;- wide_data %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"Count of Each Category by Center\",\n  ) %&gt;%\n  cols_label(\n    category = \"Product Category\"\n  ) %&gt;%\n  tab_options(\n    table.font.size = 12,\n    heading.title.font.size = 16,\n    heading.subtitle.font.size = 14,\n    table.border.top.color = \"#D3D3D3\",\n    table.border.bottom.color = \"#D3D3D3\"\n  ) %&gt;%\n  data_color(\n    columns = Charleston:Savannah,\n    colors = scales::col_numeric(palette = c(\"#FFDDC1\", \"#FF9F40\"), domain = NULL)\n  ) %&gt;%\n  fmt_number(\n    columns = Charleston:Savannah,\n    decimals = 0\n  )\n\nWarning: Since gt v0.9.0, the `colors` argument has been deprecated.\n• Please use the `fn` argument instead.\nThis warning is displayed once every 8 hours.\n\n# Display the table\npretty_wide_table\n\n\n\n\n\n\n\nCount of Each Category by Center\n\n\nProduct Category\nCharleston\nChicago\nHouston\nLos Angeles\nMemphis\nMobile\nNew Orleans\nPhiladelphia\nPort Authority NY/NJ\nSavannah\n\n\n\n\nAccessories\n65\n277\n199\n139\n254\n180\n101\n125\n111\n108\n\n\nActive\n112\n288\n164\n145\n248\n55\n29\n124\n177\n90\n\n\nBlazers & Jackets\n202\n68\n106\n16\n50\n32\n23\n29\n18\n17\n\n\nClothing Sets\n7\n3\n5\n2\n5\n11\n2\n0\n2\n0\n\n\nDresses\n173\n81\n188\n47\n161\n80\n84\n61\n22\n58\n\n\nFashion Hoodies & Sweatshirts\n269\n229\n95\n201\n239\n217\n114\n201\n198\n103\n\n\nIntimates\n266\n502\n379\n160\n266\n230\n116\n65\n174\n205\n\n\nJeans\n42\n149\n149\n273\n187\n346\n182\n314\n146\n211\n\n\nJumpsuits & Rompers\n75\n8\n9\n18\n7\n14\n13\n10\n4\n4\n\n\nLeggings\n61\n109\n24\n57\n106\n21\n43\n64\n31\n48\n\n\nMaternity\n81\n92\n289\n49\n77\n81\n70\n98\n48\n13\n\n\nOuterwear & Coats\n73\n107\n298\n130\n190\n133\n95\n176\n192\n26\n\n\nPants\n105\n93\n88\n105\n106\n92\n77\n148\n160\n67\n\n\nPants & Capris\n89\n91\n104\n38\n65\n48\n65\n42\n32\n39\n\n\nPlus\n38\n176\n84\n54\n70\n75\n107\n51\n63\n40\n\n\nShorts\n247\n159\n137\n179\n254\n208\n122\n193\n166\n100\n\n\nSkirts\n42\n38\n46\n24\n56\n40\n42\n41\n12\n26\n\n\nSleep & Lounge\n54\n371\n148\n161\n254\n181\n131\n196\n179\n96\n\n\nSocks\n24\n155\n143\n67\n120\n66\n62\n121\n114\n33\n\n\nSocks & Hosiery\n18\n169\n78\n82\n73\n57\n58\n51\n57\n23\n\n\nSuits\n35\n12\n37\n13\n49\n0\n0\n28\n2\n12\n\n\nSuits & Sport Coats\n65\n57\n77\n79\n95\n92\n71\n49\n94\n60\n\n\nSweaters\n137\n227\n201\n121\n247\n205\n164\n172\n179\n84\n\n\nSwim\n183\n160\n115\n377\n282\n235\n174\n70\n142\n60\n\n\nTops & Tees\n185\n185\n233\n187\n294\n171\n115\n182\n213\n103\n\n\nUnderwear\n71\n123\n271\n37\n136\n49\n52\n58\n36\n255\n\n\n\n\n\n\n\nEvents\n\nevents &lt;- read.csv(\"data/events.csv\")\nevents %&gt;% head(10)\n\n        id user_id sequence_number                           session_id\n1  1830685      NA               3 7fbd583c-c84e-44ef-8961-37aa6ac1a202\n2  2235844      NA               3 8da4d9d1-2bc4-49c9-9eb7-cff31302aa88\n3  1719585      NA               3 1e7da87a-4389-4542-b771-bd3d67adc83e\n4  2057155      NA               3 9e75e4d4-4813-449e-8f77-657b8768ff66\n5  2306877      NA               3 77fb8344-4a33-43f2-a423-c09f47772a73\n6  2099163      NA               3 3ff46246-fa62-4712-96e2-9f67d1f7c4f5\n7  1333354      NA               3 b36f8e59-418a-4632-9f7e-3e6f4bc9ac49\n8  2424387      NA               3 57416555-3174-4c6d-9884-48c6d58f07d0\n9  1348328      NA               3 87f99333-26ae-497b-bf2b-13a55f70a231\n10 1813545      NA               3 423b3fff-f756-4a3d-8b06-a8d51fb3faf0\n                       created_at     ip_address           city     state\n1  2019-06-03 15:47:00.000000 UTC   64.53.168.78      São Paulo São Paulo\n2  2019-02-22 06:29:00.000000 UTC  194.2.115.237      São Paulo São Paulo\n3  2019-02-19 04:34:00.000000 UTC 138.133.33.150      São Paulo São Paulo\n4  2020-03-11 07:23:00.000000 UTC    56.1.143.67    Misawa City    Aomori\n5  2021-04-17 02:09:00.000000 UTC 186.11.101.119 Embu das Artes São Paulo\n6  2022-11-17 19:21:00.000000 UTC   49.152.78.30 Embu das Artes São Paulo\n7  2022-06-19 08:30:00.000000 UTC  19.66.137.191          Arujá São Paulo\n8  2025-03-01 08:54:00.000000 UTC 154.86.211.200      São Paulo São Paulo\n9  2020-11-15 04:40:00.000000 UTC  216.18.82.193        Tieling   Beijing\n10 2021-03-17 07:27:00.000000 UTC 126.145.202.16         Foshan   Beijing\n   postal_code browser traffic_source     uri event_type\n1    02675-031  Safari          Email /cancel     cancel\n2    02675-031 Firefox        YouTube /cancel     cancel\n3    02675-031 Firefox        Adwords /cancel     cancel\n4     033-0022      IE        YouTube /cancel     cancel\n5    06810-240  Chrome          Email /cancel     cancel\n6    06810-240 Firefox          Email /cancel     cancel\n7    07432-575  Safari          Email /cancel     cancel\n8    08460-000 Firefox        Adwords /cancel     cancel\n9       100023 Firefox        YouTube /cancel     cancel\n10      100035  Chrome        Adwords /cancel     cancel\n\ntable(events$event_type)\n\n\n    cancel       cart department       home    product   purchase \n      2500      12130      12295       1860      17176       2083 \n\n\n\nggplot(events, aes(x = traffic_source)) +\n  geom_bar(fill = \"#FF9F40\", color = \"black\") +  # Fill color and border color\n  labs(title = \"Events: Distribution of Traffic Source\", \n       x = \"\", \n       y = \"Frequency\") +\n  theme_minimal()  # Use a minimal theme for clean visualization\n\n\n\n\n\n\n\n\n\nfiltered_events &lt;- events %&gt;%\n  group_by(user_id) %&gt;%\n  filter(sequence_number == max(sequence_number)) %&gt;%\n  ungroup() %&gt;% \n  select(sequence_number, event_type)\n\n# Convert columns to factors\nfiltered_events$sequence_number &lt;- as.factor(filtered_events$sequence_number)\nfiltered_events$event_type &lt;- as.factor(filtered_events$event_type)\n\n# Create a complete grid of all combinations of sequence_number (1–13) and event_type\nall_combinations &lt;- expand.grid(\n  sequence_number = factor(1:13), # Ensure sequence_number is a factor from 1 to 13\n  event_type = levels(filtered_events$event_type) # Use all unique event types\n)\n\n# Count occurrences of each combination in the original data\ndf_summary &lt;- filtered_events %&gt;%\n  group_by(sequence_number, event_type) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n# Join the original data with the complete grid\ndf_complete &lt;- all_combinations %&gt;%\n  left_join(df_summary, by = c(\"sequence_number\", \"event_type\")) %&gt;%\n  mutate(count = ifelse(is.na(count), 0, count)) # Replace NA counts with 0\n\n# Calculate proportions for each sequence_number\ndf_summary &lt;- df_complete %&gt;%\n  group_by(sequence_number) %&gt;%\n  mutate(proportion = count / sum(count)) # Normalize counts to proportions\n\n# Step 4: Create the bar chart with proportions\nggplot(df_summary, aes(x = sequence_number, y = proportion, fill = event_type)) +\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.7) + # Stacked bars\n  geom_text(aes(label = ifelse(proportion &gt; 0, scales::percent(proportion), \"\")), \n            position = position_stack(vjust = 0.5), size = 3) + # Add percentage labels\n  labs(title = \"Proportions of Event Types by Sequence Number\",\n       x = \"Sequence Number\",\n       y = \"Proportion\",\n       fill = \"Event Type\") +\n  scale_fill_brewer(palette = \"Set2\") + # Use a colorblind-friendly palette\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for readability\n\n\n\n\n\n\n\n\n\nevents_purchase &lt;- events %&gt;%\n  filter(event_type==\"purchase\") %&gt;% \n  mutate(\n    # Parse the timestamp into a proper date-time object\n    timestamp_parsed = ymd_hms(created_at),\n    \n    # # Extract time (hour:minute:second)\n    # time = format(timestamp_parsed, \"%H:%M:%S\"),\n    \n    # Extract day of the week as the full name (e.g., \"Monday\")\n    day_of_week = wday(timestamp_parsed, label = TRUE, abbr = FALSE),\n    \n    # Extract month as abbreviated name (e.g., \"Jan\")\n    month_name = month(timestamp_parsed, label = TRUE)\n  )\n\n# Process the data\nprocessed_data &lt;- events_purchase %&gt;%\n  group_by(day_of_week) %&gt;%\n  summarise(count = n()) %&gt;% # Count transactions per day\n  mutate(\n    percentage = (count / sum(count)) * 100 # Calculate percentage\n  ) %&gt;%\n  arrange(match(day_of_week, c(\"Monday\", \"Tuesday\", \"Wednesday\", \n                               \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"))) # Order days\n\n# Define shades of orange\norange_shades &lt;- c(\"#FFA500\", \"#FFB347\", \"#FFC28D\", \"#FFD7B3\", \"#FFE6CC\", \"#FFF2E6\", \"#FFFFF0\")\n\n# Create the pie chart\nggplot(processed_data, aes(x = \"\", y = percentage, fill = day_of_week)) +\n  geom_bar(stat = \"identity\", width = 1, show.legend = FALSE) + # Bar chart transformed to pie\n  coord_polar(theta = \"y\") + # Transform to pie chart\n  geom_text(aes(label = paste0(paste(day_of_week, round(percentage, 1), sep = \"\\n\"), \"%\")), \n            position = position_stack(vjust = 0.5), size = 4) + # Labels with day names and percentages\n  scale_fill_manual(values = setNames(orange_shades, processed_data$day_of_week)) + # Shades of orange\n  labs(title = \"Popular Days for Purchase\",\n       x = NULL,\n       y = NULL) +\n  theme_void() + # Remove background and gridlines\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\") # Centered title\n  )\n\n\n\n\n\n\n\n\n\ninventory_items &lt;- read.csv(\"data/inventory_items.csv\")\ninventory_items %&gt;% head(10)\n\n       id product_id                     created_at\n1   17142      13844 2024-09-24 12:43:37.000000 UTC\n2   17143      13844 2021-08-19 00:16:00.000000 UTC\n3   59969      13844 2024-06-12 07:36:02.000000 UTC\n4   59970      13844 2020-04-01 07:39:00.000000 UTC\n5   59971      13844 2020-09-21 05:48:00.000000 UTC\n6   59972      13844 2020-04-08 00:55:00.000000 UTC\n7  112815      13844 2023-06-05 20:35:35.000000 UTC\n8  112816      13844 2022-05-13 18:39:00.000000 UTC\n9  254808      13844 2023-04-07 05:36:50.000000 UTC\n10 254809      13844 2020-11-06 05:38:00.000000 UTC\n                          sold_at    cost product_category\n1  2024-10-02 13:30:37.000000 UTC 2.76804      Accessories\n2                                 2.76804      Accessories\n3  2024-08-06 23:59:02.000000 UTC 2.76804      Accessories\n4                                 2.76804      Accessories\n5                                 2.76804      Accessories\n6                                 2.76804      Accessories\n7  2023-06-21 06:20:35.000000 UTC 2.76804      Accessories\n8                                 2.76804      Accessories\n9  2023-05-05 01:07:50.000000 UTC 2.76804      Accessories\n10                                2.76804      Accessories\n             product_name      product_brand product_retail_price\n1  (ONE) 1 Satin Headband Funny Girl Designs                 6.99\n2  (ONE) 1 Satin Headband Funny Girl Designs                 6.99\n3  (ONE) 1 Satin Headband Funny Girl Designs                 6.99\n4  (ONE) 1 Satin Headband Funny Girl Designs                 6.99\n5  (ONE) 1 Satin Headband Funny Girl Designs                 6.99\n6  (ONE) 1 Satin Headband Funny Girl Designs                 6.99\n7  (ONE) 1 Satin Headband Funny Girl Designs                 6.99\n8  (ONE) 1 Satin Headband Funny Girl Designs                 6.99\n9  (ONE) 1 Satin Headband Funny Girl Designs                 6.99\n10 (ONE) 1 Satin Headband Funny Girl Designs                 6.99\n   product_department                      product_sku\n1               Women 2A3E953A5E3D81E67945BCE5519F84C8\n2               Women 2A3E953A5E3D81E67945BCE5519F84C8\n3               Women 2A3E953A5E3D81E67945BCE5519F84C8\n4               Women 2A3E953A5E3D81E67945BCE5519F84C8\n5               Women 2A3E953A5E3D81E67945BCE5519F84C8\n6               Women 2A3E953A5E3D81E67945BCE5519F84C8\n7               Women 2A3E953A5E3D81E67945BCE5519F84C8\n8               Women 2A3E953A5E3D81E67945BCE5519F84C8\n9               Women 2A3E953A5E3D81E67945BCE5519F84C8\n10              Women 2A3E953A5E3D81E67945BCE5519F84C8\n   product_distribution_center_id\n1                               7\n2                               7\n3                               7\n4                               7\n5                               7\n6                               7\n7                               7\n8                               7\n9                               7\n10                              7\n\n#unique(inventory_items$id) #all unique users \n\n# product categories are: Accessories & Active \ninventory_items %&gt;% \n  group_by(product_category) %&gt;% \n  summarise(\n    count_product_category = n()\n  )\n\n# A tibble: 2 × 2\n  product_category count_product_category\n  &lt;chr&gt;                             &lt;int&gt;\n1 Accessories                       26462\n2 Active                            16152\n\ninventory_items %&gt;% \n  group_by(product_brand) %&gt;% \n  summarise(\n    count_product_brand = n()\n  ) %&gt;% \n  arrange(desc(count_product_brand))\n\n# A tibble: 565 × 2\n   product_brand count_product_brand\n   &lt;chr&gt;                       &lt;int&gt;\n 1 Champion                     1840\n 2 Ray-Ban                      1681\n 3 Carhartt                     1395\n 4 Oakley                       1245\n 5 Columbia                     1229\n 6 Nike                          727\n 7 TrendsBlue                    619\n 8 ExOfficio                     577\n 9 Duofold                       565\n10 Isotoner                      564\n# ℹ 555 more rows\n\n\n\norder_items &lt;- read.csv(\"data/order_items.csv\")\norder_items %&gt;% head(10)\n\n       id order_id user_id product_id inventory_item_id     status\n1   41374    28521   22912      14235            111848 Processing\n2   87279    60112   48176      14235            235687    Shipped\n3  121576    83743   67040      14235            328247    Shipped\n4  104567    72056   57717      14159            282526 Processing\n5    6213     4319    3483      14159             16796    Shipped\n6   68116    46997   37721      14159            184119    Shipped\n7  102437    70588   56548      14159            276786    Shipped\n8   76605    52767   42295      14202            207010  Cancelled\n9    9148     6335    5128      14202             24733   Complete\n10  37862    26089   21027      14202            102449   Complete\n                       created_at                     shipped_at\n1  2022-10-21 06:41:05.000000 UTC                               \n2  2024-10-12 21:32:11.000000 UTC 2024-10-12 16:05:00.000000 UTC\n3  2024-12-29 16:41:24.000000 UTC 2024-12-30 19:28:00.000000 UTC\n4  2025-01-23 11:40:26.000000 UTC                               \n5  2024-07-28 14:18:53.000000 UTC 2024-07-30 18:50:00.000000 UTC\n6  2024-03-24 04:55:18.000000 UTC 2024-03-22 01:30:00.000000 UTC\n7  2023-10-10 23:20:38.000000 UTC 2023-10-11 10:29:00.000000 UTC\n8  2023-04-09 06:39:47.000000 UTC                               \n9  2019-10-15 06:35:55.000000 UTC 2019-10-15 19:00:00.000000 UTC\n10 2022-08-08 13:49:09.000000 UTC 2022-08-08 16:08:00.000000 UTC\n                     delivered_at returned_at sale_price\n1                                                   0.02\n2                                                   0.02\n3                                                   0.02\n4                                                   0.49\n5                                                   0.49\n6                                                   0.49\n7                                                   0.49\n8                                                   1.50\n9  2019-10-18 10:22:00.000000 UTC                   1.50\n10 2022-08-09 21:46:00.000000 UTC                   1.50\n\ntable(order_items$status)\n\n\n Cancelled   Complete Processing   Returned    Shipped \n      9680      15921      12624       6390      19271 \n\n\n\norders &lt;- read.csv(\"data/orders.csv\")\norders %&gt;% head(10)\n\n   order_id user_id    status gender                     created_at returned_at\n1        25      22 Cancelled      F 2024-11-19 09:38:00.000000 UTC            \n2        63      47 Cancelled      F 2023-08-29 16:14:00.000000 UTC            \n3       102      79 Cancelled      F 2025-03-11 18:16:12.838990 UTC            \n4       103      80 Cancelled      F 2022-09-25 00:13:00.000000 UTC            \n5       106      83 Cancelled      F 2023-07-16 18:56:00.000000 UTC            \n6       117      88 Cancelled      F 2022-06-22 15:12:00.000000 UTC            \n7       124      93 Cancelled      F 2020-03-27 14:11:00.000000 UTC            \n8       158     119 Cancelled      F 2021-05-14 13:03:00.000000 UTC            \n9       168     126 Cancelled      F 2019-10-26 06:35:00.000000 UTC            \n10      179     133 Cancelled      F 2024-01-11 00:57:00.000000 UTC            \n   shipped_at delivered_at num_of_item\n1                                    2\n2                                    1\n3                                    2\n4                                    2\n5                                    4\n6                                    1\n7                                    1\n8                                    1\n9                                    1\n10                                   1\n\n# Stacked bar plot\nggplot(orders, aes(x = status, fill = gender)) +\n  geom_bar(position = \"stack\") +  # Default is \"stack\"\n  labs(title = \"Order Status by gender\",\n       x = \"Status\",\n       y = \"Count\",\n       fill = \"Category 2\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nusers &lt;- read.csv(\"data/users.csv\") %&gt;% \n  rename(user_id = id) %&gt;% \n  select(-first_name, -last_name, -email, )\n\ntable(users$traffic_source)\n\n\n Display    Email Facebook  Organic   Search \n    1572     1876     2310     5858    27555"
  },
  {
    "objectID": "data_exploration2.html",
    "href": "data_exploration2.html",
    "title": "bigq",
    "section": "",
    "text": "library(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(forcats)\nlibrary(jsonlite)\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n#library(bigrquery)\nlibrary(ggplot2)\n\n\norders &lt;- read.csv(\"data/orders.csv\")\norder_items &lt;- read.csv(\"data/order_items.csv\")\n\nproducts &lt;- read.csv(\"data/products.csv\")\n\nusers &lt;- read.csv(\"data/users.csv\")\ninventory_items &lt;- read.csv(\"data/inventory_items.csv\")\n\ndistribution_centers &lt;- read.csv(\"data/distribution_centers_thelook.csv\")\n\nevents &lt;- read.csv(\"data/events.csv\")\n\n\n# Join orders with order_items to see details of each order\norders_with_items &lt;- orders %&gt;%\n  left_join(order_items, by = \"order_id\") %&gt;%\n  select(order_id, user_id.x, status.x, created_at.x, product_id, sale_price)\n\n# View sample of joined data\nhead(orders_with_items)\n\n  order_id user_id.x  status.x                   created_at.x product_id\n1       25        22 Cancelled 2024-11-19 09:38:00.000000 UTC         NA\n2       63        47 Cancelled 2023-08-29 16:14:00.000000 UTC         NA\n3      102        79 Cancelled 2025-03-11 18:16:12.838990 UTC       7084\n4      103        80 Cancelled 2022-09-25 00:13:00.000000 UTC      14021\n5      103        80 Cancelled 2022-09-25 00:13:00.000000 UTC      10876\n6      106        83 Cancelled 2023-07-16 18:56:00.000000 UTC         NA\n  sale_price\n1         NA\n2         NA\n3      18.00\n4       9.96\n5      20.00\n6         NA\n\n\n\n# Join orders with users to analyze customer behavior\norders_with_users &lt;- orders %&gt;%\n  left_join(users, by = c(\"user_id\" = \"id\")) %&gt;%\n  select(order_id, user_id, status, created_at.x, gender.x, age, state) %&gt;%\n  rename(created_at = created_at.x, gender = gender.x)  # Rename to avoid ambiguity\n\n# View sample of joined data\nhead(orders_with_users)\n\n  order_id user_id    status                     created_at gender age    state\n1       25      22 Cancelled 2024-11-19 09:38:00.000000 UTC      F  NA     &lt;NA&gt;\n2       63      47 Cancelled 2023-08-29 16:14:00.000000 UTC      F  26   Bayern\n3      102      79 Cancelled 2025-03-11 18:16:12.838990 UTC      F  22   Fujian\n4      103      80 Cancelled 2022-09-25 00:13:00.000000 UTC      F  NA     &lt;NA&gt;\n5      106      83 Cancelled 2023-07-16 18:56:00.000000 UTC      F  NA     &lt;NA&gt;\n6      117      88 Cancelled 2022-06-22 15:12:00.000000 UTC      F  34 Arkansas\n\n\n\ntop_products &lt;- order_items %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  group_by(product_id, category, brand) %&gt;%\n  summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  arrange(desc(total_sales))\n\n# View top 5 products\nhead(top_products, 5)\n\n# A tibble: 5 × 4\n  product_id category                      brand             total_sales\n       &lt;int&gt; &lt;chr&gt;                         &lt;chr&gt;                   &lt;dbl&gt;\n1      16717 Tops & Tees                   Harley-Davidson          521.\n2      28793 Accessories                   Seirus Innovation        443.\n3       2297 Fashion Hoodies & Sweatshirts Jenni                    441.\n4       9534 Sleep & Lounge                IZOD                     400 \n5      17115 Fashion Hoodies & Sweatshirts Modern Culture           400 \n\n\n\nAverage number of orders made by different age groups.\n\n# Add age group column\norders_per_user_age &lt;- orders_with_users %&gt;%\n  mutate(age_group = case_when(\n    age &lt; 18 ~ \"Under 18\",\n    age &gt;= 18 & age &lt; 25 ~ \"18-24\",\n    age &gt;= 25 & age &lt; 35 ~ \"25-34\",\n    age &gt;= 35 & age &lt; 45 ~ \"35-44\",\n    age &gt;= 45 & age &lt; 55 ~ \"45-54\",\n    age &gt;= 55 ~ \"55+\",\n    TRUE ~ \"Unknown\"\n  )) %&gt;%\n  group_by(user_id, age_group) %&gt;%\n  summarise(num_orders = n(), .groups = \"drop\")\n\nggplot(orders_per_user_age, aes(x = num_orders, fill = age_group)) +\n  geom_histogram(binwidth = 1, color = \"black\", alpha = 0.7, position = \"identity\") +\n  labs(title = \"Distribution of Orders by Age Group\", x = \"Number of Orders\", y = \"Count\") +\n  theme_minimal() +\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\n\n\n\nSales by distribution center\n\n# Aggregate sales by distribution center\nsales_by_dc &lt;- order_items %&gt;%\n  left_join(inventory_items, by = c(\"inventory_item_id\" = \"id\")) %&gt;%\n  left_join(distribution_centers, by = c(\"product_distribution_center_id\" = \"id\")) %&gt;%\n  group_by(name) %&gt;%\n  #filter(!is.na(name)) %&gt;% \n  summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;% \n  mutate(name = ifelse(name == \"Port Authority of New York/New Jersey NY/NJ\", \"Port Authority of NY/NJ\", name))\n\n# Plot\nggplot(sales_by_dc, aes(x = reorder(name, total_sales), y = total_sales)) +\n  geom_bar(stat = \"identity\", fill = \"red\") +\n  coord_flip() +\n  labs(title = \"Total Sales by Distribution Center\",\n       x = \"Distribution Center\",\n       y = \"Total Sales ($)\") +\n  theme_minimal()\n\n\n\n\n\n\n\nunique(sales_by_dc$name)\n\n [1] \"Charleston SC\"           \"Chicago IL\"             \n [3] \"Houston TX\"              \"Los Angeles CA\"         \n [5] \"Memphis TN\"              \"Mobile AL\"              \n [7] \"New Orleans LA\"          \"Philadelphia PA\"        \n [9] \"Port Authority of NY/NJ\" \"Savannah GA\"            \n[11] NA                       \n\n\n\n\nSales contribution\n\n# Identify Top 10 Brands by Total Sales\ntop_brands &lt;- order_items %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  group_by(brand) %&gt;%\n  summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  arrange(desc(total_sales)) %&gt;%\n  head(10)\n\n# Aggregate Sales by Distribution Center and Brand\nsales_by_dc &lt;- order_items %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  left_join(inventory_items, by = c(\"inventory_item_id\" = \"id\")) %&gt;%\n  left_join(distribution_centers, by = c(\"product_distribution_center_id\" = \"id\")) %&gt;%\n  filter(`product_brand` %in% top_brands$brand) %&gt;%\n  group_by(`product_brand`, `name.y`) %&gt;%  # Correct column references: product_brand and name.y\n  summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  arrange(`product_brand`, desc(total_sales))\n\n\n# Stacked Bar Chart by Distribution Center\nggplot(sales_by_dc, aes(x = reorder(`name.y`, total_sales), y = total_sales, fill = `product_brand`)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +  # Stack bars for each distribution center\n  coord_flip() +\n  labs(title = \"Sales Contribution by Distribution Center for Top 10 Brands\",\n       x = \"Distribution Center\",\n       y = \"Total Sales ($)\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate X-axis labels for better visibility\n    axis.title = element_text(size = 12),\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\nLiked brands in both genders.\n\n# Aggregate sales by gender and brand\nsales_by_gender_brand &lt;- order_items %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  left_join(orders, by = c(\"order_id\" = \"order_id\")) %&gt;%\n  group_by(gender, brand) %&gt;%  # Grouping by gender and brand\n  summarise(num_orders = sum(num_of_item, na.rm = TRUE), .groups = \"drop\") %&gt;%  # Sum of items sold\n  arrange(gender, desc(num_orders))\n\n# View the aggregated data\nhead(sales_by_gender_brand)\n\n# A tibble: 6 × 3\n  gender brand                num_orders\n  &lt;chr&gt;  &lt;chr&gt;                     &lt;int&gt;\n1 F      Allegra K                  8617\n2 F      FineBrandShop              1540\n3 F      Hanes                      1332\n4 F      Motherhood Maternity       1112\n5 F      Anna-Kaci                  1021\n6 F      HUE                         890\n\ntop_5_brands_gender &lt;- sales_by_gender_brand %&gt;%\n  group_by(gender) %&gt;%\n  top_n(5, num_orders) %&gt;%\n  ungroup()\n\n# Stacked Bar Chart for Top 5 Brands by Gender\nggplot(top_5_brands_gender, aes(x = gender, y = num_orders, fill = brand)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  labs(title = \"Top 5 Most Liked Brands by Gender (Based on Number of Items Sold)\",\n       x = \"Gender\",\n       y = \"Number of Items Sold\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\n\n\n\n\n\n\n\n# Facet Grid for Top 5 Brands by Gender\nggplot(top_5_brands_gender, aes(x = reorder(brand, num_orders), y = num_orders, fill = brand)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  # Flip axes for better readability\n  facet_wrap(~ gender, scales = \"free_y\") +  # Separate plots for each gender\n  labs(title = \"Top 5 Most Liked Brands by Gender (Based on Number of Items Sold)\",\n       x = \"Brand\",\n       y = \"Number of Items Sold\") +\n  theme_minimal() +\n  theme(legend.position = \"none\", axis.text.x = element_text(angle = 45, hjust = 1))  \n\n\n\n\n\n\n\n\n\n\nSales trend\n\n# # Aggregate sales by quarter\n# sales_by_quarter &lt;- order_items %&gt;%\n#   mutate(\n#     create_at = ymd_hms(created_at)) %&gt;% \n#     #quarter = quarter(created_at)) %&gt;%\n#     group_by(quarter) %&gt;%\n#     summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\")\n# \n# # Inspect the class of 'quarter'\n# print(\"Class of 'quarter' column:\")\n# print(class(sales_by_quarter$quarter))\n# \n# # Create a plot for total sales by quarter\n# ggplot(sales_by_quarter, aes(x = quarter, y = total_sales)) +\n#   geom_line(color = \"blue\") +\n#   geom_point() +\n#   scale_x_date(date_breaks = \"3 months\", date_labels = \"%b %Y\") +  # Adjust date labels for quarters\n#   labs(title = \"Total Sales Over Time (Quarterly)\", x = \"Quarter\", y = \"Total Sales ($)\") +\n#   theme_minimal() +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\n# \n\n\n\nProfits earned by brands.\n\n# Calculate profit for each product and brand\nprofit_margins &lt;- order_items %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  group_by(product_id, brand, cost, retail_price) %&gt;%\n  summarise(total_sale_price = sum(sale_price, na.rm = TRUE),\n            total_items_sold = n(), .groups = \"drop\") %&gt;%\n  mutate(total_cost = total_items_sold * cost,\n         profit = total_sale_price - total_cost,\n         profit_margin = (profit / total_sale_price) * 100) %&gt;%\n  arrange(desc(profit))  # Order by highest profit\n\n# 1. Bar Plot: Top Brands by Profit\ntop_brands_by_profit &lt;- profit_margins %&gt;%\n  group_by(brand) %&gt;%\n  summarise(total_profit = sum(profit), .groups = \"drop\") %&gt;%\n  top_n(10, total_profit)  # Get top 10 brands with highest profit\n\nggplot(top_brands_by_profit, aes(x = reorder(brand, total_profit), y = total_profit, fill = brand)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Top 10 Brands by Total Profit\",\n       x = \"Brand\",\n       y = \"Total Profit ($)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n# 2. Bar Plot: Profit Margin by Brand\nprofit_margin_by_brand &lt;- profit_margins %&gt;%\n  group_by(brand) %&gt;%\n  summarise(avg_profit_margin = mean(profit_margin), .groups = \"drop\") %&gt;%\n  top_n(10, avg_profit_margin)\n\nggplot(profit_margin_by_brand, aes(x = reorder(brand, avg_profit_margin), y = avg_profit_margin, fill = brand)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Average Profit Margin by Brand\",\n       x = \"Brand\",\n       y = \"Average Profit Margin (%)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n# 3. Bar Plot: Total Sales vs. Profit by Brand\ntotal_sales_profit_by_brand &lt;- profit_margins %&gt;%\n  group_by(brand) %&gt;%\n  summarise(total_sales = sum(total_sale_price), total_profit = sum(profit), .groups = \"drop\") %&gt;%\n  top_n(10, total_profit)\n\nggplot(total_sales_profit_by_brand, aes(x = reorder(brand, total_profit))) +\n  geom_bar(aes(y = total_sales, fill = \"Sales\"), stat = \"identity\", position = \"dodge\") +\n  geom_bar(aes(y = total_profit, fill = \"Profit\"), stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Total Sales vs. Profit by Brand\",\n       x = \"Brand\",\n       y = \"Amount ($)\") +\n  scale_fill_manual(values = c(\"Sales\" = \"skyblue\", \"Profit\" = \"orange\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\nOverall conversion rate from data.\n\n# # Check the columns in the events table\n# str(events)\n# \n# # Check the columns in the orders table\n# str(orders)\n# \n# # Assuming the events table has an 'id' column, proceed with the join\n# event_order_link &lt;- events %&gt;%\n#   filter(event_type == \"purchase\") %&gt;%\n#   left_join(orders, by = \"user_id\") %&gt;%\n#   filter(created_at.x &gt;= created_at.y - days(1) & created_at.x &lt;= created_at.y + days(1)) %&gt;%\n#   select(event_id = id, order_id, user_id, event_time = created_at.x, order_time = created_at.y, status)\n# \n# # Check the structure of the resulting dataframe\n# str(event_order_link)\n# \n# # Summarize the conversion data\n# conversion_summary &lt;- event_order_link %&gt;%\n#   summarise(total_events = n(),\n#             converted_orders = sum(status %in% c(\"Shipped\", \"Complete\"), na.rm = TRUE),\n#             conversion_rate = converted_orders / total_events * 100)\n# \n# # View the results\n# head(event_order_link)\n# conversion_summary\n\n\n\nBrands that sell the most in given states.\n\n# # Aggregate sales by state, brand, and product, then filter top 10 brands and states\n# top_brands_state_heatmap &lt;- order_items %&gt;%\n#   left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n#   left_join(users, by = c(\"user_id\" = \"id\")) %&gt;%\n#   group_by(state, brand) %&gt;%\n#   summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n#   filter(state %in% top_states_by_sales$state) %&gt;%\n#   group_by(state) %&gt;%\n#   top_n(10, total_sales) %&gt;%  # Get top 10 brands per state\n#   ungroup()\n# \n# # Plot: Heatmap of Top 10 Brands by Sales in Top 10 States\n# ggplot(top_brands_state_heatmap, aes(x = state, y = reorder(brand, total_sales), fill = total_sales)) +\n#   geom_tile() +\n#   labs(title = \"Heatmap of Top 10 Brands by Sales in Top 10 States\",\n#        x = \"State\",\n#        y = \"Brand\",\n#        fill = \"Total Sales ($)\") +\n#   theme_minimal() +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\nDominating Product categories in different states.\n\n# # Aggregate sales by state, category, and brand\n# top_categories_by_state_brand &lt;- order_items %&gt;%\n#   left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n#   left_join(users, by = c(\"user_id\" = \"id\")) %&gt;%\n#   group_by(state, category, brand) %&gt;%\n#   summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n#   filter(state %in% top_states_by_sales$state) %&gt;%\n#   group_by(state) %&gt;%\n#   top_n(10, total_sales) %&gt;%  # Get top 10 brands per state\n#   ungroup()\n# \n# # Plot: Top 10 Brands by Product Category and State\n# ggplot(top_categories_by_state_brand, aes(x = reorder(state, total_sales), y = total_sales, fill = category)) +\n#   geom_bar(stat = \"identity\", position = \"dodge\") +\n#   coord_flip() +\n#   labs(\n#     title = \"Top 10 Product Categories and State\",\n#     x = \"State\",\n#     y = \"Total Sales ($)\",\n#     fill = \"Product Category\"\n#   ) +\n#   theme_minimal() +\n#   theme(\n#     axis.text.x = element_text(angle = 45, hjust = 1),\n#     legend.position = \"bottom\",  # Place the legend at the bottom for clarity\n#     plot.title = element_text(size = 14, face = \"bold\"),  # Make the title larger for emphasis\n#     axis.title = element_text(size = 12)  # Make axis titles slightly larger\n#   )\n\n\n\nShopping choices among genders.\n\n# Aggregate sales by gender and product (using 'name' for product name)\ntop_products_by_gender &lt;- order_items %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  left_join(orders, by = c(\"order_id\" = \"order_id\")) %&gt;%\n  group_by(gender, name) %&gt;%  # 'name' represents the product name\n  summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  arrange(gender, desc(total_sales)) %&gt;%\n  group_by(gender) %&gt;%\n  slice_head(n = 5)  # Get the top 5 products for each gender\n\n# Plot: Bar graph with top 5 products by gender\nggplot(top_products_by_gender, aes(x = reorder(name, total_sales), y = total_sales, fill = gender)) +\n  geom_bar(stat = \"identity\") +\n  facet_wrap(~gender) +  # Separate the bars for each gender in a facet\n  coord_flip() +  # Flip the axes for better readability\n  labs(title = \"Top 5 Products Bought by Each Gender\",\n       x = \"Product\",\n       y = \"Total Sales ($)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\", axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\nStates where returning is most common\n\n# Analyzing top 10 returned orders by state\nreturned_orders_by_state &lt;- orders %&gt;%\n  filter(status == \"Returned\") %&gt;%\n  left_join(users, by = c(\"user_id\" = \"id\")) %&gt;%\n  group_by(state) %&gt;%\n  summarise(num_returns = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(num_returns)) %&gt;%\n  slice_head(n = 10)  # Get top 10 states\n\n# Plot the top 10 returned orders by state\nggplot(returned_orders_by_state, aes(x = reorder(state, num_returns), y = num_returns, fill = state)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Top 10 States with Returned Orders\",\n       x = \"State\",\n       y = \"Number of Returned Orders\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\nBrands known for returned orders\n\n# Analyzing top 10 returned orders by brand\nreturned_orders_by_brand &lt;- order_items %&gt;%\n  filter(status == \"Returned\") %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  group_by(brand) %&gt;%\n  summarise(num_returns = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(num_returns)) %&gt;%\n  slice_head(n = 10)  # Get top 10 brands\n\n# Plot the top 10 returned orders by brand\nggplot(returned_orders_by_brand, aes(x = reorder(brand, num_returns), y = num_returns, fill = brand)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Top 10 Brands with Returned Orders\",\n       x = \"Brand\",\n       y = \"Number of Returned Orders\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\nWhich age group tends to return more often\n\n# Analyzing top 10 returned orders by age group\nreturned_orders_by_age &lt;- orders %&gt;%\n  filter(status == \"Returned\") %&gt;%\n  left_join(users, by = c(\"user_id\" = \"id\")) %&gt;%\n  mutate(age_group = case_when(\n    age &lt; 18 ~ \"Under 18\",\n    age &gt;= 18 & age &lt; 25 ~ \"18-24\",\n    age &gt;= 25 & age &lt; 35 ~ \"25-34\",\n    age &gt;= 35 & age &lt; 45 ~ \"35-44\",\n    age &gt;= 45 & age &lt; 55 ~ \"45-54\",\n    age &gt;= 55 ~ \"55+\",\n    TRUE ~ \"Unknown\"\n  )) %&gt;%\n  group_by(age_group) %&gt;%\n  summarise(num_returns = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(num_returns)) %&gt;%\n  slice_head(n = 10)  # Get top 10 age groups\n\n# Plot the top 10 returned orders by age group\nggplot(returned_orders_by_age, aes(x = reorder(age_group, num_returns), y = num_returns, fill = age_group)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Top 10 Age Groups with Returned Orders\",\n       x = \"Age Group\",\n       y = \"Number of Returned Orders\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\nSales generated by categories of product\n\nsales_by_category &lt;- order_items %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  group_by(category) %&gt;%\n  summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  arrange(desc(total_sales))\n\n# Plot\nggplot(head(sales_by_category, 10), aes(x = reorder(category, total_sales), y = total_sales)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Top 10 Product Categories by Total Sales\",\n       x = \"Product Category\",\n       y = \"Total Sales ($)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nAverage Order value\n\n# Calculate average order value by state\naov_by_state &lt;- orders_with_users %&gt;%\n  left_join(order_items, by = \"order_id\") %&gt;%\n  group_by(state) %&gt;%\n  summarise(avg_order_value = mean(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  arrange(desc(avg_order_value))\n\n# Plot\nggplot(head(aov_by_state, 10), aes(x = reorder(state, avg_order_value), y = avg_order_value)) +\n  geom_bar(stat = \"identity\", fill = \"orange\") +\n  coord_flip() +\n  labs(title = \"Top 10 States by Average Order Value\",\n       x = \"State\",\n       y = \"Average Order Value ($)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# Plot age distribution\nggplot(users, aes(x = age)) +\n  geom_histogram(binwidth = 5, fill = \"purple\", color = \"black\") +\n  labs(title = \"Customer Age Distribution\",\n       x = \"Age\",\n       y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nSales generate by each product\n\n# Aggregate sales by product\ntop_products &lt;- order_items %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  group_by(product_id, name) %&gt;%\n  summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  arrange(desc(total_sales))\n\n# Plot\nggplot(head(top_products, 10), aes(x = reorder(name, total_sales), y = total_sales)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"\",\n       x = \"Product Name\",\n       y = \"Total Sales ($)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nCost vs Retail Price\n\n# Scatter plot of cost vs. retail price\nggplot(products, aes(x = cost, y = retail_price)) +\n  geom_point(alpha = 0.5, color = \"darkgreen\") +\n  geom_smooth(method = \"lm\", color = \"red\") +\n  labs(title = \"Correlation Between Product Cost and Retail Price\",\n       x = \"Cost ($)\",\n       y = \"Retail Price ($)\") +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nConversion rates of brands\n\n# Get top-selling brands\ntop_brands &lt;- orders_with_users %&gt;%\n  left_join(order_items, by = \"order_id\") %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  group_by(brand) %&gt;%\n  summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  arrange(desc(total_sales)) %&gt;%\n  slice_head(n = 10)  # Top 10 brands by sales\n\n# Calculate conversion rate for top brands\ntop_brand_conversion &lt;- events %&gt;%\n  filter(event_type == \"purchase\") %&gt;%\n  left_join(order_items, by = c(\"id\" = \"order_id\")) %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  filter(brand %in% top_brands$brand) %&gt;%\n  group_by(brand) %&gt;%\n  summarise(total_events = n(),\n            converted_orders = sum(!is.na(status) & status %in% c(\"Shipped\", \"Delivered\")),\n            conversion_rate = (converted_orders / total_events) * 100,\n            .groups = \"drop\") %&gt;%\n  arrange(desc(conversion_rate))\n\n# Plot conversion rates for top-selling brands\nggplot(top_brand_conversion, aes(x = reorder(brand, conversion_rate), y = conversion_rate)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Conversion Rate for Top-Selling Brands\",\n       x = \"Brand\",\n       y = \"Conversion Rate (%)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nBrands and their area wise performance\n\n# Step 1: Identify Top 10 Brands by Total Sales\ntop_brands &lt;- order_items %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  group_by(brand) %&gt;%\n  summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  arrange(desc(total_sales)) %&gt;%\n  head(10)\n\n# Step 2: Get Sales by State for Top 10 Brands\nsales_by_state_top_brands &lt;- order_items %&gt;%\n  left_join(products, by = c(\"product_id\" = \"id\")) %&gt;%\n  left_join(users, by = c(\"user_id\" = \"id\")) %&gt;%\n  filter(brand %in% top_brands$brand) %&gt;%\n  group_by(state, brand) %&gt;%\n  summarise(total_sales = sum(sale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  arrange(brand, desc(total_sales))\n\n# ✅ Keep top 5 states for each brand\ntop_states_per_brand &lt;- sales_by_state_top_brands %&gt;%\n  group_by(brand) %&gt;%\n  slice_max(total_sales, n = 5) %&gt;%\n  ungroup()\n\n# Step 3: Plot using facets for better clarity\nggplot(top_states_per_brand, aes(x = reorder(state, total_sales), y = total_sales, fill = state)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  facet_wrap(~ brand, scales = \"free_y\") +  # Facet by brand\n  labs(title = \"Top 10 Brands and Their Top 5 States by Performance\",\n       x = \"State\",\n       y = \"Total Sales ($)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate labels\n        legend.position = \"none\")  # Remove legend to reduce clutter\n\n\n\n\n\n\n\n\n\n\nReturns from different traffic sources\n\n#\n# # Plot the traffic sources by conversion rate\n# ggplot(conversion_by_traffic, aes(x = reorder(traffic_source, conversion_rate), y = conversion_rate, fill = traffic_source)) +\n#   geom_bar(stat = \"identity\") +\n#   labs(title = \"Conversion Rate by Traffic Source\",\n#        x = \"Traffic Source\",\n#        y = \"Conversion Rate (%)\") +\n#   theme_minimal() +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n# \n# # Plot the traffic sources by total sales\n# ggplot(conversion_by_traffic, aes(x = reorder(traffic_source, total_sales), y = total_sales, fill = traffic_source)) +\n#   geom_bar(stat = \"identity\") +\n#   labs(title = \"Total Sales by Traffic Source\",\n#        x = \"Traffic Source\",\n#        y = \"Total Sales ($)\") +\n#   theme_minimal() +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n# \n# # Plot the traffic sources by total profit\n# ggplot(conversion_by_traffic, aes(x = reorder(traffic_source, total_profit), y = total_profit, fill = traffic_source)) +\n#   geom_bar(stat = \"identity\") +\n#   labs(title = \"Total Profit by Traffic Source\",\n#        x = \"Traffic Source\",\n#        y = \"Total Profit ($)\") +\n#   theme_minimal() +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  }
]